generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model migrations {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(255)
  run_on DateTime @db.Timestamp(6)
}

model supports {
  id           Int       @id @default(autoincrement())
  name         String?   @db.VarChar
  created_time DateTime? @db.Timestamptz(6)
}

model universities {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar
  created_at         DateTime?            @db.Timestamptz(6)
  updated_at         DateTime?            @db.Timestamptz(6)
  deleted_at         DateTime?            @db.Timestamptz(6)
  university_courses university_courses[]
}

model courses {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar
  created_at         DateTime?            @db.Timestamptz(6)
  updated_at         DateTime?            @db.Timestamptz(6)
  deleted_at         DateTime?            @db.Timestamptz(6)
  university_courses university_courses[]
}

model university_courses {
  id            Int          @id @default(autoincrement())
  university_id Int
  course_id     Int
  created_at    DateTime?    @db.Timestamptz(6)
  updated_at    DateTime?    @db.Timestamptz(6)
  deleted_at    DateTime?    @db.Timestamptz(6)
  courses       courses      @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "university_courses_courses_id_fk")
  universities  universities @relation(fields: [university_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "university_courses_universities_id_fk")
  students      students[]
}

model students {
  id                   Int                @id @default(autoincrement())
  first_name           String             @db.VarChar
  last_name            String             @db.VarChar
  mobile               String
  email                String
  address              String
  university_course_id Int
  created_at           DateTime?          @db.Timestamptz(6)
  updated_at           DateTime?          @db.Timestamptz(6)
  deleted_at           DateTime?          @db.Timestamptz(6)
  university_courses   university_courses @relation(fields: [university_course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "students_university_courses_id_fk")
  accounts             accounts[]
}

model accounts {
  id          Int       @id @default(autoincrement())
  student_id  Int
  email       String    @db.VarChar
  username    String    @db.VarChar
  password    String    @db.VarChar
  isVerified  Boolean?
  verified_at DateTime? @db.Timestamptz(6)
  status      Boolean
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  deleted_at  DateTime? @db.Timestamptz(6)
  students    students  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "accounts_students_id_fk")
}
